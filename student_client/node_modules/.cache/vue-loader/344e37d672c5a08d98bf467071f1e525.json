{"remainingRequest":"D:\\Idea项目\\Student\\student_client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Idea项目\\Student\\student_client\\src\\views\\Teacher\\teacherGradeCourseManage\\teacherQueryGradeCourse.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\Idea项目\\Student\\student_client\\src\\views\\Teacher\\teacherGradeCourseManage\\teacherQueryGradeCourse.vue","mtime":1687269747980},{"path":"D:\\Idea项目\\Student\\student_client\\node_modules\\css-loader\\dist\\cjs.js","mtime":1685794117592},{"path":"D:\\Idea项目\\Student\\student_client\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1685794121493},{"path":"D:\\Idea项目\\Student\\student_client\\node_modules\\postcss-loader\\src\\index.js","mtime":1685794118801},{"path":"D:\\Idea项目\\Student\\student_client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1685794117013},{"path":"D:\\Idea项目\\Student\\student_client\\node_modules\\vue-loader\\lib\\index.js","mtime":1685794120760}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnN0eWxlZC10YWJsZSB7CiAgd2lkdGg6IDEwMCU7CiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsKICBtYXJnaW4tdG9wOiAyMHB4Owp9Cgouc3R5bGVkLXRhYmxlIHRoLAouc3R5bGVkLXRhYmxlIHRkIHsKICBwYWRkaW5nOiAxMHB4OwogIGJvcmRlcjogMXB4IHNvbGlkICNjY2M7CiAgdGV4dC1hbGlnbjogY2VudGVyOwp9Cgouc3R5bGVkLXRhYmxlIHRoIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjJmMmYyOwogIGZvbnQtd2VpZ2h0OiBib2xkOwp9Cgouc3R5bGVkLXRhYmxlIHRyOm50aC1jaGlsZChldmVuKSB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjhmODsKfQoKLnN0eWxlZC10YWJsZSB0cjpob3ZlciB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2UyZTJlMjsKfQo="},{"version":3,"sources":["teacherQueryGradeCourse.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA","file":"teacherQueryGradeCourse.vue","sourceRoot":"src/views/Teacher/teacherGradeCourseManage","sourcesContent":["<template>\n  <div>\n    <el-container>\n      <el-main>\n        <el-card>\n          <el-form>\n            <el-form-item label=\"班级名称\" prop=\"classChoose\">\n              <el-select v-model=\"ruleForm.classIdChoose\" placeholder=\"请选择\">\n                <el-option\n                  v-for=\"classes in classList\"\n                  :key=\"classes.id\"\n                  :label=\"classes.name\"\n                  :value=\"classes.id\"\n                ></el-option>\n              </el-select>\n            </el-form-item>\n          </el-form>\n        </el-card>\n        <table class=\"styled-table\">\n          <thead>\n            <tr>\n              <th>姓名</th>\n              <template v-for=\"course in courseList\">\n                <th>{{ course.cname }}</th>\n              </template>\n              <th>总分</th>\n              <th>平均分</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(student, index) in studentList\" :key=\"index\">\n              <td>{{ student.sname }}</td>\n              <template v-for=\"grade in gradeList[index]\">\n                <td v-if=\"grade != null\">{{ grade.grade }}</td>\n                <td v-else>无</td>\n              </template>\n              <td>{{ sumList[index] }}</td>\n              <td>{{ avgList[index] }}</td>\n            </tr>\n          </tbody>\n        </table>\n      </el-main>\n    </el-container>\n    <button @click=\"exportGrades\">导出成绩</button>\n  </div>\n</template>\n\n<style>\n.styled-table {\n  width: 100%;\n  border-collapse: collapse;\n  margin-top: 20px;\n}\n\n.styled-table th,\n.styled-table td {\n  padding: 10px;\n  border: 1px solid #ccc;\n  text-align: center;\n}\n\n.styled-table th {\n  background-color: #f2f2f2;\n  font-weight: bold;\n}\n\n.styled-table tr:nth-child(even) {\n  background-color: #f8f8f8;\n}\n\n.styled-table tr:hover {\n  background-color: #e2e2e2;\n}\n</style>\n\n\n<script>\nimport * as XLSX from 'xlsx';\nexport default {\n  data() {\n    return {\n      classList: [],\n      studentList: [],\n      courseList: [],\n      gradeList: [],\n      sumList: [],\n      avgList: [],\n      ruleForm: {\n        classIdChoose: \"\",\n      }\n    };\n  },\n  methods: {\n    exportGrades() {\n      const worksheet = XLSX.utils.table_to_sheet(this.$refs.gradeList);\n      const workbook = XLSX.utils.book_new();\n      XLSX.utils.book_append_sheet(workbook, worksheet, '成绩表');\n\n      const today = new Date();\n      const filename = `成绩表_${today.getFullYear()}${today.getMonth() + 1}${today.getDate()}.xlsx`;\n\n      XLSX.writeFile(workbook, filename);\n    }\n  },\n  created() {\n    const that = this\n    that.tid = sessionStorage.getItem('tid');\n\n    axios.get(\"http://localhost:10086/course/findClassId?tid=\" + this.tid).then(function (resp) {\n      that.classList = resp.data;\n    })\n  },\n  watch: {\n    \"ruleForm.classIdChoose\": {\n      handler(newChoose, old) {\n        const that = this\n        axios.get(\"http://localhost:10086/student/findByClassName?classId=\" + newChoose).then(function (resp) {\n          that.studentList = resp.data;\n          console.log(that.studentList);\n          axios.get(\"http://localhost:10086/course/findByClassId?classid=\" + newChoose).then(function (resp) {\n            that.courseList = resp.data;\n            const requests1 = [];\n            for (let i = 0; i < that.studentList.length; i++) {\n              // 定义一个数组来保存所有的异步请求\n              const requests = [];\n              // 发起异步请求\n              for (let j = 0; j < that.courseList.length; j++) {\n                const request = axios.get(\"http://localhost:10086/SCT/find?sid=\" + that.studentList[i].sid + \"&cid=\" + that.courseList[j].cid);\n                requests.push(request);\n                requests1.push(request);\n              }\n              // 使用 Promise.all 等待所有异步请求完成\n              Promise.all(requests).then(function (responses) {\n                let sum = 0.0;\n                let avg = 0.0;\n                let tempList = [];\n                // 处理每个异步请求的响应\n                for (let k = 0; k < requests.length; k ++) {\n                  const resp = responses[k];\n                  console.log(resp);\n\n                  if (resp.data != null) {\n                    sum = sum + resp.data.grade;\n                  }\n                  tempList.push(resp.data);\n                }\n                avg = sum / tempList.length;\n                that.avgList.push(avg);\n                that.sumList.push(sum);\n                that.gradeList.push(tempList);\n              });\n            }\n            Promise.all(requests1).then(function (responses) {\n              console.log(that.studentList);\n              for (let i = 0; i < that.studentList.length; i++) {\n                for (let j = 0; j < that.studentList.length - i - 1; j++) {\n                  if (that.avgList[j] < that.avgList[j + 1]) {\n                    let t = that.avgList[j];\n                    that.avgList[j] = that.avgList[j + 1];\n                    that.avgList[j + 1] = t;\n                    console.log(that.studentList[j + 1]);\n                    t = that.studentList[j];\n                    that.studentList[j] = that.studentList[j + 1];\n                    that.studentList[j + 1] = t;\n                    \n                    t = that.gradeList[j];\n                    that.gradeList[j] = that.gradeList[j + 1];\n                    that.gradeList[j + 1] = t;\n                    t = that.sumList[j];\n                    that.sumList[j] = that.sumList[j + 1];\n                    that.sumList[j + 1] = t;\n                  }\n                }\n              }\n            })\n          })\n        }\n      )}\n    }\n  }\n}\n</script>"]}]}